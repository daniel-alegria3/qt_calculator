#include <string>
#include <catch2/catch_test_macros.hpp>
#include "rpn/undoredo.h"

TEST_CASE("UndoRedo should undo and redo", "[unittest_undoredo]") {
    UndoRedo *ur = new UndoRedo();
    vector<string> op;

    ur->empty();////////////////////////////////////////////////////////////////
    op = { "(","1", "UNDO", "REDO"};
    CHECK( ur->simulate(op) == "(1");
    ur->empty();////////////////////////////////////////////////////////////////
    op = { "(","1", "UNDO","UNDO","UNDO", "REDO","REDO", "REDO"};
    CHECK( ur->simulate(op) == "(1");
    ur->empty();////////////////////////////////////////////////////////////////
    op = { "(","1","+","2",")",
           "UNDO","UNDO","UNDO","UNDO","UNDO","UNDO","UNDO",
           "REDO","REDO","REDO","REDO","REDO","REDO" };
    CHECK( ur->simulate(op) == "(1+2)");
    ur->empty();////////////////////////////////////////////////////////////////
    op = { "(","1","+","2",")",
           "UNDO","UNDO","UNDO","UNDO","UNDO","UNDO","UNDO",
           "REDO","REDO" };
    CHECK( ur->simulate(op) == "(1");
    ur->empty();////////////////////////////////////////////////////////////////
    op = { "{","4","+","(","5","+","6",")","-","3","*","5", "UNDO","UNDO",
           "^","4","}","-","5","*","9", "UNDO","UNDO","REDO", "10" };
    CHECK( ur->simulate(op) == "{4+(5+6)-3^4}-5*10");
    ur->empty();////////////////////////////////////////////////////////////////
    op = { "{","4","+","(","5","+","6",")","-","3","*","5", "UNDO","UNDO", "UNDO", "UNDO",
           "^","4","}","-","5","*","9", "UNDO","UNDO","REDO", "REDO", "10" };
    CHECK( ur->simulate(op) == "{4+(5+6)^4}-5*910");
    ur->empty();////////////////////////////////////////////////////////////////
    op = { "(","7","*","3",")","-","4", "UNDO","UNDO","UNDO","REDO","REDO",
           "+","(","2","*","(","3","+","1",")",")", "UNDO","UNDO","REDO" };
    CHECK( ur->simulate(op) == "(7*3)-+(2*(3+1)");
    ur->empty();////////////////////////////////////////////////////////////////
    op = { "(","7","*","3",")","-","4", "UNDO","UNDO",
           "+","(","2","*","(","3","+","1",")",")", "UNDO","UNDO","REDO", "UNDO", "UNDO" };
    CHECK( ur->simulate(op) == "(7*3)+(2*(3+");
    ur->empty();////////////////////////////////////////////////////////////////
    op = { "{","9","+","2","-","(","8","/","4",")", "UNDO","UNDO",
           "*","(","6","-","1",")","/","2", "UNDO","REDO","REDO","UNDO", "+","5","}" };
    CHECK( ur->simulate(op) == "{9+2-(8/*(6-1)/+5}");
    ur->empty();////////////////////////////////////////////////////////////////
    op = { "(","10","+","3",")","*","5", "UNDO","UNDO",
           "-","(","4","/","2",")","*","3", "UNDO","UNDO","REDO",
           "+","7","*","(","5","+","2",")", "REDO","UNDO" };
    CHECK( ur->simulate(op) == "(10+3)-(4/2)*+7*(5+2");
}

